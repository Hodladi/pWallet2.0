@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SimpLN.Data
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <h3 class="auth-title">Register</h3>
        <p class="auth-description">Create your account to access the application.</p>

        <EditForm Model="Input" OnValidSubmit="RegisterUser" method="post" FormName="register">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label class="form-label">Email</label>
                <InputText @bind-Value="Input.Email"
                           class="form-control auth-input"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label class="form-label">Password</label>
                <InputText type="password"
                           @bind-Value="Input.Password"
                           class="form-control auth-input"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-group">
                <label class="form-label">Confirm Password</label>
                <InputText type="password"
                           @bind-Value="Input.ConfirmPassword"
                           class="form-control auth-input"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="confirm password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="custom-button custom-button-outline w-100 mt-3">
	            Register
            </button>
        </EditForm>

        <div class="auth-links mt-3">
            <p class="text-center">
	            Already have an account?<br />
                <a href="/Account/Login" class="auth-link">Login here</a>
            </p>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private bool _shouldRedirect;

    protected override async Task OnInitializedAsync()
    {
	    if (await UserManager.Users.AnyAsync())
	    {
		    _shouldRedirect = true;
	    }
        
	    await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
	    if (firstRender && _shouldRedirect)
	    {
		    await Task.Delay(1);
		    NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
	    }
    }

    public async Task RegisterUser(EditContext editContext)
    {
	    if (await UserManager.Users.AnyAsync())
	    {
		    NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
		    return;
	    }
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
