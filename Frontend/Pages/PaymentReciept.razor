@attribute [Authorize]

@page "/Reciept"

@using Microsoft.AspNetCore.Authorization
@using SimpLN.Models
@using SimpLN.Services.UtilityServices

@inherits SimpLN.Frontend.Layout.SimpLn

@inject LoadingService LoadingService
@inject StateContainerService StateContainerService
@inject NavigationManager NavManager

<div class="auth-container">
    <div class="auth-card">
        <h3 class="success-symbol"><i class="bi bi-check-circle-fill text-success"></i></h3>
        @if (LoadingService.IsLoading)
        {
            <div class="loading-spinner">
                <div class="spinner"></div>
            </div>
        }
        else
        {
            @if (_invoiceResponse != null)
            {

                <div class="text-alignment mb-3">
                    <span class="bolt12-title text-success">SUCCESS</span><br/><br/>
                    <span class="reciept-text">Amount: @_invoiceResponse.RecipientAmountSat sats</span><br />
                    <span class="reciept-text">Fee: @_invoiceResponse.RoutingFeeSat sats</span><br/>
                    <span class="reciept-text">Total: <strong>@(_invoiceResponse.RecipientAmountSat + _invoiceResponse.RoutingFeeSat)</strong> sats</span>
	            </div>
            }
            else
            {
                <p class="bolt12-title mb-3">No invoice data available.</p>
            }
            <div class="button-row-right">
	            <button type="button" class="custom-button custom-button-cancel" @onclick="Cancel"><span>Back</span></button>
            </div>
        }
    </div>
</div>

@code {
    PayInvoiceResponse? _invoiceResponse;

    protected override async Task OnInitializedAsync()
    {
        LoadingService.StartLoading();
        try
        {
            await Task.Delay(1000);
            if (StateContainerService.Receipt != null)
            {
                _invoiceResponse = new PayInvoiceResponse()
                    {
                        PaymentHash = StateContainerService.Receipt.PaymentHash ?? null,
                        PaymentId = StateContainerService.Receipt.PaymentId ?? null,
                        PaymentPreimage = StateContainerService.Receipt.PaymentPreimage ?? null,
                        RecipientAmountSat = StateContainerService.Receipt.RecipientAmountSat ?? null,
                        RoutingFeeSat = StateContainerService.Receipt.RoutingFeeSat ?? null
                    };
            }
            else
            {
                Console.WriteLine("No receipt data available.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing: {ex.Message}");
        }
        finally
        {
            LoadingService.StopLoading();
        }
    }

    private void Cancel()
    {
	    NavManager.NavigateTo("/", forceLoad: true);
    }
}
